<% if defined?(data) || countable.count > 0 %>
  <canvas id="canvas-<%=r = SecureRandom.uuid%>"></canvas>
  <script>
    $(function() {

      Chart.register(ChartDataLabels);
      Chart.defaults.set('plugins.datalabels', {
        color: 'white',
        font: {
          weight: 'bold'
        }
      })


      <%
        if !defined?(data)
          if !defined?(months_ago); months_ago = 12; end
          earliest = countable.min(:created_at).to_date
          d = [Date.new(earliest.year, earliest.month, 1) - 1.month]
          if earliest < months_ago.months.ago
            earliest = months_ago.months.ago
            d = [Date.new(earliest.year, earliest.month, 1)]
          end
          d << (d.last + 1.month) while d.last < Date.new(Date.today.year, Date.today.month, 1)
          data = d.map do |x|
            ["#{Date::MONTHNAMES[x.month]} #{x.year}", countable.and(:created_at.gte => x, :created_at.lt => (x + 1.month)).count]
          end.to_h
        end

        if defined?(make_projection)
          current_month_value = data.values.last
          days_in_month = Date.new(Date.today.year, Date.today.month, -1).day
          days_passed = Date.today.day
          projected_value = (current_month_value.to_f / days_passed * days_in_month).round
          projection = [projected_value - current_month_value, 0].max
        end
      %>

      new Chart(document.getElementById("canvas-<%=r%>").getContext("2d"), {
      type: 'bar',
      data: {
        labels: <%== data.keys.to_json %>,
        datasets: [
          {
            backgroundColor: 'rgba(0, 185, 99, 1)',
            borderColor: 'rgba(0, 185, 99, 1)',
            data: <%== data.values.to_json %>
          },
          {
            backgroundColor: 'rgba(0, 185, 99, 0.5)',
            borderColor: 'rgba(0, 185, 99, 0.5)',
            data: <%== data.size.times.map { |i| i == data.size - 1 ? (defined?(projection) ? projection : nil) : nil }.to_json %>
          }
        ],
      },
      options: {
        plugins: {
          legend: {
            display: false
          },
          datalabels: {
            formatter: function(value, context) {
              if (context.datasetIndex === 1 && value !== null) {
                var actualValue = context.chart.data.datasets[0].data[context.dataIndex];
                return <%==(defined?(unit) ? unit : '').to_json %> + (actualValue + value).toLocaleString() + <%==(defined?(unit_after) ? unit_after : '').to_json %>;
              }
              return value ? <%==(defined?(unit) ? unit : '').to_json %> + value.toLocaleString() + <%==(defined?(unit_after) ? unit_after : '').to_json %> : null;
            }
          }
        },
        responsive: true,
        scales: {
          x: {
            stacked: true
          },
          y: {
            stacked: true,
            title: {
              display: true,
              text: <%== (defined?(unit) ? unit : (defined?(unit_after) ? unit_after : '')).to_json %>
            }
          }
        }
      }
    });

    });
  </script>
<% end %>
